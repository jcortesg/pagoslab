require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Api::ChargesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Api::Charge. As you add validations to Api::Charge, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    # skip("Add a hash of attributes valid for your model")
    { amount: 100, currency: 'usd', source: '12345678', description: 'Charge for test@test.com'}
  }

  let(:invalid_attributes) {
    # skip("Add a hash of attributes invalid for your model")
    { amount: nil, currency: nil, source: nil, description: nil}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # Api::ChargesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all api_charges as @api_charges" do
      charge = Api::Charge.create! valid_attributes
      get :index, { format: 'json'}, valid_session
      expect(assigns(:api_charges)).to eq([charge])
    end
  end

  describe "GET #show" do
    it "assigns the requested api_charge as @api_charge" do
      charge = Api::Charge.create! valid_attributes
      get :show, {:id => charge.to_param, format: 'json'}, valid_session
      expect(assigns(:api_charge)).to eq(charge)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Api::Charge" do
        expect {
          post :create, {:format => 'json', :api_charge => valid_attributes}, valid_session
        }.to change(Api::Charge, :count).by(1)
      end

      it "assigns a newly created api_charge as @api_charge" do
        post :create, {:format => 'json', :api_charge => valid_attributes}, valid_session
        expect(assigns(:api_charge)).to be_a(Api::Charge)
        expect(assigns(:api_charge)).to be_persisted
      end

      it "not redirects to the created api_charge" do
        post :create, {:api_charge => valid_attributes, :format => 'json'}, valid_session
        expect(response).to_not redirect_to(Api::Charge.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved api_charge as @api_charge" do
        post :create, {:api_charge => invalid_attributes, :format => 'json'}, valid_session
        expect(assigns(:api_charge)).to be_a_new(Api::Charge)
      end

      it "re-renders the 'new' template" do
        post :create, {:api_charge => invalid_attributes, :format => 'json'}, valid_session
        parsed_response = JSON.parse(response.body)
        expect(parsed_response['amount']).to eq(["can't be blank", "is not a number"])
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested api_charge" do
      charge = Api::Charge.create! valid_attributes
      expect {
        delete :destroy, {:id => charge.to_param, :format => 'json'}, valid_session
      }.to change(Api::Charge, :count).by(-1)
    end

    it "redirects to the api_charges list" do
      charge = Api::Charge.create! valid_attributes
      delete :destroy, {:id => charge.to_param, :format => 'json'}, valid_session
      expect(response).to_not redirect_to(api_charges_url)
    end
  end

end
